(add-load-path "./")
#< (srfi :105) >
(import (rnrs)
	(srfi :64))

(test-begin "SRFI-105 tests")

;; from SRFI-105 samples
(test-equal "1" '(* a (+ b c)) '{a * {b + c}})
(test-equal "2" '(eqv? x `a) '{x eqv? `a})
(test-equal "3" '(/ (- a) b) '{(- a) / b})
(test-equal "4" '(+ (f a b) (g h)) '{(f a b) + (g h)})
(test-equal "5" '(+ a (f b) x) '{a + (f b) + x})
(test-equal "6" '(and (> a 0) (>= b 1)) '{{a > 0} and {b >= 1}})

;; from http://srfi.schemers.org/srfi-105/mail-archive/msg00054.html
(test-equal "" '(<= n 2) '{n <= 2})
(test-equal "" '(+ a b c) '{a + b + c})
;; this case is ok, but test-equal raises an error
;;(test-equal "" '(,op x y z) '{x ,op y ,op z})
(test-equal "" '(/ (- a) b) '{-(a) / b})
(test-equal "" '(+ (f a b) (g h)) '{f(a b) + g(h)})
(test-equal "" '(+ a (f b) x) '{a + f(b) + x})
(test-equal "" '(quote (f x)) '{'f(x)} )

;; from examples
;; http://srfi.schemers.org/srfi-105/mail-archive/msg00080.html

(define-syntax test-infix
  (syntax-rules ()
    ((_ expect expr)
     (test-equal expr expect
		 (let ((p (open-string-input-port expr)))
		   (read p))))))

;; === sweeten ===
(test-infix '(* (length indent-increment) 3) "{length(indent-increment) * 3}")
(test-infix '(- (length indent) (length marked-indent-increment))
	    "{length(indent) - length(marked-indent-increment)}")
(test-infix '(and (> (length indent) min-indent-marking)
		  (last-indent-unmarked indent))
	    "{{length(indent) > min-indent-marking} and last-indent-unmarked(indent)}")
(test-infix '(< (length x) boring-length) "{length(x) < boring-length}")
(test-infix '(+ count-so-far 1) "{count-so-far + 1}")
(test-infix '(>= (length x) 3) "{length(x) >= 3}")
(test-infix '(<= (length x) 6) "{length(x) <= 6}")
(test-infix '(and (pair? x) (null? (cdr x))) "{pair?(x) and null?(cdr(x))}")
(test-infix '(+ pos (length item)) "{pos + length(item)}")
(test-infix '(< (+ pos (length item-sameline)) maxwidth)
	    "{{pos + length(item-sameline)} < maxwidth}")
(test-infix '(+ pos (length item-sameline)) "{pos + length(item-sameline)}")
(test-infix '(< (+ (posdent indent-already indent) newlen) maxwidth)
	    "{{posdent(indent-already indent) + newlen} < maxwidth}")
(test-infix '(and (memq (car m) cuddle-first-parameter) (>= (length m) 3))
	    "{memq(car(m) cuddle-first-parameter) and {length(m) >= 3}}")
(test-infix '(and (< length-asline max-unit-character-length)
		  (fits-width? indent-already indent length-asline)
		  (< (general-length m) max-unit-list-length))
	    "{ {length-asline < max-unit-character-length} and fits-width?(indent-already indent length-asline) and {general-length(m) < max-unit-list-length} }")
(test-infix '(and (char? (car x))
		  (null? (cdr x))
		  (eq? (car x) #\newline))
	    "{char?(car(x)) and null?(cdr(x)) and {car(x) eq? #\\newline}}")
(test-infix '(and (not (eq? c next))
		  (memq next end-of-line-chars))
	    "{not{c eq? next} and memq(next end-of-line-chars)}")
(test-infix '(char=? c #\;) "{c char=? #\\;}")
(test-infix '(or (char=? c #\space) (char=? c tab))
	    "{{c char=? #\\space} or {c char=? tab}}")

;; === letterfall ===
(test-infix '(and (< 64 n) (<= n (+ 64 26)))
	    "{{ 64 < n } and { n <= { 64 + 26 }}}")
(test-infix '(- n 64 1)
	    "{ n - 64 - 1 }")
(test-infix '(and (< 96 n) (<= n (+ 96 26)))
	    "{{ 96 < n } and { n <= { 96 + 26 }}}")
(test-infix '(- n 96 1) "{ n - 96 - 1 }")
(test-infix '(and (<= 48 n) (<= n (+ 48 9)))
	    "{{ 48 <= n } and { n <= { 48 + 9 }}}")
(test-infix '(- n 48) "{ n - 48 }")
(test-infix '(char=? c #\-) "{ c char=? #\\- }")
(test-infix '(char=? c #\') "{ c char=? #\\' }")
(test-infix '(<= kv 126) "{ kv <= 126 }")
(test-infix '(= kv gdk:Escape) "{ kv = gdk:Escape }")
(test-infix '(char=? (char-toupper k) c) "{ char-toupper(k) char=? c }")
(test-infix '(+ col 1) "{ col + 1 }")
(test-infix '(- 20 (inexact->exact (floor (/ len 2))))
	    "{ 20 - inexact->exact(floor{ len / 2 })}")
(test-infix '(+ 7 n) "{ 7 + n }")
(test-infix '(+ 64 n 1) "{ 64 + n + 1 }")
(test-infix '(char=? (char-toupper k) char)
	    "{ char-toupper(k) char=? char }")
(test-infix '(+ score 1)
	    "{ score + 1 }")
(test-infix '(= (remainder nscore 10) 0)
	    "{{ nscore remainder 10 } = 0 }")
(test-infix '(+ level 1) "{ level + 1 }")
(test-infix '(char=? k esc-key) "{ k char=? esc-key }")
(test-infix '(+ line 1) "{ line + 1 }")
(test-infix '(= line 22) "{ line = 22 }")
(test-infix '(* (expt 0.75 level) 400) "{{ 0.75 expt level } * 400 }")
(test-infix '(and (< 96 n) (<= n (+ 96 26)))
	    "{{ 96 < n } and { n <= { 96 + 26 }}}")
(test-infix '(- n 32) "{ n - 32 }")
(test-infix '(* 40 25) "{ 40 * 25 }")
(test-infix '(= n (* 40 25)) "{ n = { 40 * 25 }}")
(test-infix '(+ n 1) "{ n + 1 }")
(test-infix '(+ x (* y 40)) "{ x + { y * 40 }}")
(test-infix '(+ cursor 1) "{ cursor + 1 }")
(test-infix '(>= cursor (* 40 25)) "{ cursor >= { 40 * 25 }}")
(test-infix '(= i end) "{ i = end }")
(test-infix '(+ i 1) "{ i + 1 }")
(test-infix '(/ screen-width 320) "{ screen-width / 320 }")
(test-infix '(/ screen-height 200) "{ screen-height / 200 }")
(test-infix '(+ x 1) "{ x + 1 }")
(test-infix '(+ y 1) "{ y + 1 }")
(test-infix '(- rescaled<x+1> rescaled<x>) "{ rescaled<x+1> - rescaled<x> }")
(test-infix '(- rescaled<y+1> rescaled<y>) "{ rescaled<y+1> - rescaled<y> }")
(test-infix '(+ (/ screen-width 2) (* (- x 160) scaling-factor))
	    "{{ screen-width / 2 } + {{ x - 160 } * scaling-factor }}")
(test-infix '(+ (/ screen-height 2) (* (- y 100) scaling-factor))
	    "{{ screen-height / 2 } + {{ y - 100 } * scaling-factor }}")
(test-infix '(/ n 40) "{ n / 40 }")
(test-infix '(- n (* l 40)) "{ n - { l * 40 }}")
;; I beleive the example was wrong, it needed to be wrapped with #\{ and #\}
(test-infix '(not (char=? (vector-ref display-screen n)
			  (vector-ref latest-screen n)))
	    "{not{ vector-ref(display-screen n) char=? vector-ref(latest-screen n) }}")
(test-infix '(+ n 1) "{ n + 1 }")
(test-infix '(* c 8) "{ c * 8 }")
(test-infix '(* l 8) "{ l * 8 }")
(test-infix '(= i 8) "{ i = 8 }")
(test-infix '(+ i 1) "{ i + 1 }")
(test-infix '(= x 8) "{ x = 8 }")
(test-infix '(= (logand line (expt 2 (- 7 x))) 0)
	    "{{ line logand { 2 expt { 7 - x }}} = 0}")
(test-infix '(+ basex x) "{ basex + x }")
(test-infix '(+ basey y) "{ basey + y }")
(test-infix '(+ x 1) "{ x + 1 }")

;; extra
;; some literals in currying-infix
(test-infix '(vector-ref #(a b c) 0) "{vector-ref(#(a b c) 0)}")
(test-infix '(+ #xFF #e10.1) "{#xFF + #e10.1}")

(test-end)